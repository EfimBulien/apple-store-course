@model TechStoreEll.Web.Models.RestockViewModel

@{
    ViewData["Title"] = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞";
}

<h3 class="mt-5">–¢–µ–∫—É—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
<div class="table-responsive">
    <table class="table table-sm table-striped">
        <thead>
        <tr>
            <th>–¢–æ–≤–∞—Ä</th>
            <th>–í–∞—Ä–∏–∞–Ω—Ç</th>
            <th>–°–∫–ª–∞–¥</th>
            <th>–î–æ—Å—Ç—É–ø–Ω–æ</th>
            <th>–†–µ–∑–µ—Ä–≤</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var inv in Model.Inventory)
        {
            <tr>
                <td>@inv.ProductName</td>
                <td>@inv.VariantCode</td>
                <td>@inv.WarehouseName</td>
                <td>@inv.Quantity</td>
                <td>@inv.Reserve</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<h3 class="mt-5">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è</h3>
<div class="table-responsive">
    <table class="table table-sm table-striped">
        <thead>
        <tr>
            <th>–¢–æ–≤–∞—Ä</th>
            <th>–°–∫–ª–∞–¥</th>
            <th>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</th>
            <th>–ü—Ä–∏—á–∏–Ω–∞</th>
            <th>–ö–µ–º</th>
            <th>–ö–æ–≥–¥–∞</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var m in Model.Movements)
        {
            <tr class="@(m.ChangeQty > 0 ? "table-success" : "table-danger")">
                <td>@m.ProductName (@m.VariantCode)</td>
                <td>@m.WarehouseName</td>
                <td>@(m.ChangeQty > 0 ? "+" : "")@m.ChangeQty</td>
                <td>
                    @switch (m.Reason)
                    {
                        case "restock":
                            <text>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞</text>
                            break;
                        case "sale":
                            <text>–ü—Ä–æ–¥–∞–∂–∞</text>
                            break;
                        case "return":
                            <text>–í–æ–∑–≤—Ä–∞—Ç</text>
                            break;
                        case "adjustment":
                            <text>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞</text>
                            break;
                        default:
                            @m.Reason
                            break;
                    }
                </td>
                <td>@m.CreatedBy</td>
                <td>@m.CreatedAt.ToString("g")</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<h2>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞</h2>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<form asp-action="Index" method="post">
    @Html.AntiForgeryToken()

    <div id="items-container">
        <!-- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
    </div>

    <button type="button" class="btn btn-outline-primary" onclick="addRow()">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
    <button type="submit" class="btn btn-success mt-3">–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥</button>
</form>

@section Scripts {
<script>
function addRow() {
    const container = document.getElementById('items-container');
    const index = container.children.length;

    const warehouses = @Html.Raw(Json.Serialize(ViewBag.Warehouses));
    const variants = @Html.Raw(Json.Serialize(ViewBag.Variants));

    let warehouseOptions = warehouses.map(w => `<option value="${w}">${w}</option>`).join('');
    let variantOptions = variants.map(v => `<option value="${v.id}">${v.name}</option>`).join('');

    const row = `
        <div class="row mb-3 p-2 border rounded">
            <div class="col-md-4">
                <label>–¢–æ–≤–∞—Ä</label>
                <select name="Items[${index}].ProductVariantId" class="form-control" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                    ${variantOptions}
                </select>
            </div>
            <div class="col-md-3">
                <label>–°–∫–ª–∞–¥</label>
                <select name="Items[${index}].WarehouseName" class="form-control" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                    ${warehouseOptions}
                </select>
            </div>
            <div class="col-md-3">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                <input type="number" name="Items[${index}].Quantity" class="form-control" min="1" required />
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="button" class="btn btn-danger" onclick="this.closest('.row').remove()">üóëÔ∏è</button>
            </div>
        </div>
    `;
    container.insertAdjacentHTML('beforeend', row);
}
</script>
}

